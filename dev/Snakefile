

from random import sample
from string import ascii_uppercase, digits


configfile: 'config.yaml'
#include: "SimulationSnake"
#depends: bedtools samtools bwa vcftools freebayes

sample_by_name = {c['name'] : c for c in config['data_sets']}
ref_genome_by_name = { g['name'] : g for g in config['reference_genomes']}
chain_dict_by_destination = config['lift_genomes']
samps2process = [c['name'] for c in config['data_sets'] if c['pedigree'] == 'offspring' ]

def get_input_files(directory):
	#collect files
	result = []
	#directory = 'FASTQs/%s/%s/' % tuple([treatment, sample_name])
	for fname in os.listdir(directory):
		if fname.endswith('.fastq') or fname.endswith('.fq'):
			result.append(os.path.join(directory, fname))
	result = list(sorted(result))
	#sanity chex go here
	return result

def samps_by_group(grup):
	subset_out = []
	grupt = {}
	for c in config['data_sets']:
		try:
			grupt[c['name']] = c['group']
		except KeyError:
			pass
	for k in grupt.keys():
		if grupt[k] == grup:
			subset_out += [k]
	subset_out.sort()
	return subset_out

def return_group_by_samp(samp):
	try:
		return sample_by_name[samp]['group']
	except KeyError:
		raise KeyError("%s has no group listed - edit the config file to add one" % tuple([samp]))

def ref_by_name_lookup(wildcards):
	try:
		return ref_genome_by_name[sample_by_name[wildcards.sample]['pedigree']]['path']
	except KeyError: #	if no reference genome is listed, eg in the case of a hybrid
		return ''



###############################################

# rename the synthetic_reads_* rules;
# remove the is_synthetic demand from check_for_reads and add it to the read demander rules
# eg, 
# if paired:
# 	if synthetic:
# 		shell(ART)
# 	if empirical:
# 		try SRA:
# 			shell(download SRA)
###############################################



rule gather_reads_se:
	input:
		ref_genome=ref_by_name_lookup
#		ref_genome = lambda wildcards: ref_genome_by_name[sample_by_name[wildcards.sample]['pedigree']]['path']
#	define a named function to return empty string if the sample is an offspring?
#only important once the simulation is implemented ^^
	output: 
		reads='FASTQs/{treatment}/{sample}/{sample}.fq'
	params:
		runmem_gb=8,
		runtime="12:00:00",
		platform='HS25',
		read_len=100,
		cov_depth=20
	run:
		if not sample_by_name[wildcards.sample]['paired']:
			if sample_by_name[wildcards.sample]['type'] == 'synthetic':
				shell(
					"~/modules/art_bin_MountRainier/art_illumina -na -ss '{params.platform}' -i {input.ref_genome} -l '{params.read_len}' -f '{params.cov_depth}' -o FASTQs/{wildcards.treatment}/{wildcards.sample}/{wildcards.sample}"
					)
			elif sample_by_name[wildcards.sample]['type'] == 'empirical':
				try:
					sra = sample_by_name[wildcards.sample]['SRA']
					shell(
						"fastq-dump  --split-3 --outdir FASTQs/{wildcards.treatment}/{wildcards.sample}/ {sra}"
						)
					shell(""" for phial in $(ls FASTQs/{wildcards.treatment}/{wildcards.sample}/ | grep fastq); do 
							nu_phial=$(echo $phial | rev | cut -f 2- -d . | rev );
							mv FASTQs/{wildcards.treatment}/{wildcards.sample}/$phial FASTQs/{wildcards.treatment}/{wildcards.sample}/"$nu_phial".fq;
							done""")
				except KeyError:
					raise KeyError("%s is listed as empirical but no reads found and no SRA to download!" % tuple([samp]))
		else:
			shell("echo 'THESE READS ARE SUPPOSED TO BE PAIRED'")


rule gather_reads_pe:
	input:
		ref_genome=ref_by_name_lookup
#		ref_genome = lambda wildcards: ref_genome_by_name[sample_by_name[wildcards.sample]['pedigree']]['path']
#	see notes on gather_reads_se
	output: 
		reads1='FASTQs/{treatment}/{sample}/{sample}_1.fq',
		reads2='FASTQs/{treatment}/{sample}/{sample}_2.fq'
	params:
		platform='HS25',
		read_len=100,
		insert_mean=200,
		insert_sd=10,
		cov_depth=20,
		runmem_gb=8,
		runtime="12:00:00"
	run:
		if sample_by_name[wildcards.sample]['paired']:
			if sample_by_name[wildcards.sample]['type'] == 'synthetic':
				shell(
					"~/modules/art_bin_MountRainier/art_illumina -p -na -ss '{params.platform}'  -i {input.ref_genome} -l '{params.read_len}' -f '{params.cov_depth}' -m '{params.insert_mean}' -s '{params.insert_sd}' -o FASTQs/{wildcards.treatment}/{wildcards.sample}/{wildcards.sample}_"
					)
			elif sample_by_name[wildcards.sample]['type'] == 'empirical':
				try:
					sra = sample_by_name[wildcards.sample]['SRA']
					shell(
						"fastq-dump  --split-3 --outdir FASTQs/{wildcards.treatment}/{wildcards.sample}/ {sra}"
						)
					shell(""" for phial in $(ls FASTQs/{wildcards.treatment}/{wildcards.sample}/ | grep fastq); do 
							nu_phial=$(echo $phial | rev | cut -f 2- -d . | rev );
							mv FASTQs/{wildcards.treatment}/{wildcards.sample}/$phial FASTQs/{wildcards.treatment}/{wildcards.sample}/"$nu_phial".fq;
							done""")

				except KeyError:
					raise KeyError("%s is listed as empirical but no reads found and no SRA to download!" % tuple([wildcards.sample]))				
		else:
			shell("echo 'THESE READS ARE NOT SUPPOSED TO PAIRED'")

ruleorder: gather_reads_pe > gather_reads_se

#https://bitbucket.org/snakemake/snakemake/issues/37/add-complex-conditional-file-dependency
def check_for_reads(wildcards):
	direc = sample_by_name[wildcards.sample]['path']

	extant_fqs = get_input_files(direc)

	if len(extant_fqs) >0 :
		return extant_fqs
	else:
		if not sample_by_name[wildcards.sample]['paired']:
			return expand("{directory}{sample}.fq", directory=[direc], sample=[wildcards.sample], treatment=sample_by_name[wildcards.sample]['treatment'] )
		else:
			return expand("{directory}{sample}_{readnum}.fq", directory=[direc], sample=[wildcards.sample], treatment=sample_by_name[wildcards.sample]['treatment'], readnum=[1,2])

	# elif sample_by_name[wildcards.sample]['type'] == 'empirical':
	# 	try:
	# 		sra = sample_by_name[wildcards.sample]['SRA']
	# 		if not sample_by_name[wildcards.sample]['paired']:

	# 	pass






rule bwa_sam:
	output:
		bam='mapped_reads/{sample}/{sample}_vs_{parent}.bwa.sort.bam',
	input:
		check_for_reads
	threads: 4
	params:
		runmem_gb=8,
		runtime="36:00:00"	
	run:
		read_files = get_input_files(sample_by_name[wildcards.sample]['path'])
		paired_reads = sample_by_name[wildcards.sample]['paired']
		ref_genome = ref_genome_by_name[wildcards.parent]['path']		
		if paired_reads:
			shell(
				"sh scripts/bwa_pe.sh mapped_reads/{wildcards.sample}/{wildcards.sample}_vs_{wildcards.parent}.bwa {read_files[0]} {read_files[1]} {ref_genome}"
				)
		else:
			shell(
				"sh scripts/bwa_se.sh mapped_reads/{wildcards.sample}/{wildcards.sample}_vs_{wildcards.parent}.bwa {read_files[0]} {ref_genome}"
				)
		shell("samtools flagstat {output.bam} > {output.bam}.flagstat")
		shell("samtools stats {output.bam} > {output.bam}.stat")



#https://www.biostars.org/p/56246/
rule bwa_uniqueUpOnIt:
	output:
		bam_out='mapped_reads/{sample}/{sample}_vs_{parent}.bwaUniq.sort.bam'
	input:
		bam_in='mapped_reads/{sample}/{sample}_vs_{parent}.bwa.sort.bam'
	params:
		quality="-q 20 -F 0x0100 -F 0x0200 -F 0x0300 -F 0x04",
		uniqueness="XT:A:U.*X0:i:1.*X1:i:0",
		runmem_gb=8,
		runtime="3:00:00"
	threads: 4
	run:
		ref_genome = ref_genome_by_name[wildcards.parent]['path']	
		shell('samtools view {params.quality} {input.bam_in} | grep -E {params.uniqueness} | samtools view -bS -T {ref_genome} - | samtools sort -o {output.bam_out} - ')
#		'samtools view {params.quality} mapped_reads/SucSec/SucSec_vs_droSim1.sort.bam | grep "XT:A:U" | grep  "X0:i:1" | grep "X1:i:0" samtools view -bS -T referenceSequence.fa - > reads.uniqueMap.bam'
		shell("samtools flagstat {output.bam_out} > {output.bam_out}.flagstat")
		shell("samtools stats {output.bam_out} > {output.bam_out}.stat")

rule NGM_sam:
	output:
		bam_out='mapped_reads/{sample}/{sample}_vs_{parent}.ngm.sort.bam'
	input:
		reads=check_for_reads
	params:
		strat=1,
		topn=1,
		runmem_gb=8,
		runtime="12:00:00"
	run:
		ref_genome = ref_genome_by_name[wildcards.parent]['path']
		paired_reads = sample_by_name[wildcards.sample]['paired']
		sam="%s.sam" % '.'.join(output.bam_out.rsplit('.')[:-2])
		if paired_reads:
			shell('/nas/longleaf/home/csoeder/modules/NextGenMap-0.5.0/bin/ngm-0.5.0/ngm -1 {input.reads[0]} -2 {input.reads[1]} -r {ref_genome} -o {sam} -b -n {params.topn} --no-unal --strata {params.strat}' )
		else:
			shell('/nas/longleaf/home/csoeder/modules/NextGenMap-0.5.0/bin/ngm-0.5.0/ngm -q {input.reads[0]}  -r {ref_genome} -o {sam} -b -n {params.topn} --no-unal --strata {params.strat}' )
		shell('samtools sort -o {output.bam_out} {sam}')
		shell("samtools flagstat {output.bam_out} > {output.bam_out}.flagstat")
		shell("samtools stats {output.bam_out} > {output.bam_out}.stat")


rule mpiler:
	input:
		sorted_bam='mapped_reads/{sample}/{sample}_vs_{parent}.{aligner}.sort.bam'
	output:
		mpile='mapped_reads/{sample}/{sample}_vs_{parent}.{aligner}.mpileup'
	params:
		runmem_gb=8,
		runtime="3:00:00"
	run:
		ref_genome = ref_genome_by_name[wildcards.parent]['path']		
		shell(
		"samtools mpileup -Bf {ref_genome} {input.sorted_bam} > {output.mpile}"
		)


rule shared_snipper:
	input:
		offspring_mpile='mapped_reads/{sample}/{sample}_vs_{parent}.{aligner}.mpileup',
		otherparent_mpile='mapped_reads/{compare}/{compare}_vs_{parent}.{aligner}.mpileup'
	output:
		shared_snps='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.sharedSnps.out'
	params:
		minCov=3,
		minFrac=0.9,
		runmem_gb=96,
		runtime="96:00:00"
	run:
		suffix = ''.join(sample(ascii_uppercase + digits, k=10))
		shell(""" cat {input.offspring_mpile}| awk '{{if($4 >= {params.minCov})print;}}' > {input.offspring_mpile}.filtCov.{suffix} """)
		shell(""" cat {input.otherparent_mpile}| awk '{{if($4 >= {params.minCov})print;}}' > {input.otherparent_mpile}.filtCov.{suffix} """)
		shell("python scripts/shared_snps.py -c {params.minCov} -f {params.minFrac} {input.offspring_mpile}.filtCov.{suffix} {input.otherparent_mpile}.filtCov.{suffix} {output.shared_snps}")
		shell("rm {input.offspring_mpile}.filtCov.{suffix} {input.otherparent_mpile}.filtCov.{suffix}")

rule out2bed:
	input:
		snps_out='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.sharedSnps.out'
	output:
		snps_bed='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.sharedSnps.bed'
	params:
		runmem_gb=8,
		runtime="3:00:00"
	shell:
		'sh scripts/out2bed.sh {input.snps_out} {output.snps_bed}'



rule lifter:
	input:
		unlifted='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.sharedSnps.bed'
	output:
		lifted='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.lift2{lift_genome}.sharedSnps.bed',
		too_heavy='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.{lift_genome}.sharedSnps.tooHeavy'
	params:
		runmem_gb=8,
		runtime="3:00:00"
	run:
		chain = chain_dict_by_destination[wildcards.lift_genome][wildcards.parent]
		shell(
			'~/modules/UCSC_utils/liftOver {input.unlifted} {chain} {output.lifted}.tmp {output.too_heavy}'
		)
		shell(
			'bedtools sort -i {output.lifted}.tmp > {output.lifted}'
		)
		shell(
			'rm {output.lifted}.tmp'
		)

ruleorder: lifter > out2bed

rule heavy2bed:
	input:
		#heavy='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.{lift_genome}.sharedSnps.tooHeavy'
		heavy='variant_comparisons/{heavyPrefix}.sharedSnps.tooHeavy'
	output:
		#heavyBed='variant_comparisons/{sample}_and_{compare}_vs_{parent}.{aligner}.{lift_genome}.tooHeavy.sharedSnps.bed' 
		heavyBed='variant_comparisons/{heavyPrefix}.tooHeavy.sharedSnps.bed' 
	params:
		runmem_gb=8,
		runtime="3:00:00"
	shell:
		"cat {input.heavy} |  grep -v '#' | bedtools sort -i - > {output.heavyBed}"

rule window_maker:
	output:
		windowed='{ref_genome}_w{window_size}_s{slide_rate}.windows.bed'
	params:
		runmem_gb=8,
		runtime="1:00:00"
	run:
		fai_path = ref_genome_by_name[wildcards.ref_genome]['fai'],
		shell(
			'bedtools makewindows -w {wildcards.window_size} -s {wildcards.slide_rate} -g {fai_path} | bedtools sort -i - > {output.windowed}'
		)

rule window_counter:
	input:
		windows='{window_prefix}.windows.bed',
		snps='variant_comparisons/{snp_prefix}.sharedSnps.bed'
	output:
		window_counts='analysis_out/{snp_prefix}.{window_prefix}.windowCounts.bed'
	params:
		runmem_gb=8,
		runtime="1:00:00"

	shell:
		'bedtools map -c 5,5 -o sum,count -null 0 -a {input.windows} -b {input.snps} > {output.window_counts}'


rule SNP_binner:
	input:
		snps='variant_comparisons/{snp_prefix}.sharedSnps.bed'
	output:
		snp_bins='analysis_out/{snp_prefix}.b{bin_size}s{slide_rate}.snpBins.bed'
	params:
		runmem_gb=8,
		runtime="6:00:00"
	shell:
		"python scripts/bin_by_SNP.py {input.snps} {output.snp_bins} {wildcards.bin_size} {wildcards.slide_rate}"

ruleorder: RGfix_single > bwa_sam
ruleorder: RGfix_single > bwa_uniqueUpOnIt
#####

rule RGfix_single:
	input:
		"mapped_reads/{sample}/{sample}_vs_{parent}.{aligner}.sort.bam"
	output:
		bam="mapped_reads/{sample}/{sample}_vs_{parent}.RG{id}.{aligner}.sort.bam",
#		flg = "{sample}_vs_{parent}_RG_fixed.single.flag"
	params:
		rg="RGLB=lib1 RGPL=illumina RGPU={sample} RGSM={sample} RGID={id}",
		runmem_gb=8,
		runtime="6:00:00"
	run:
		shell("java -jar ~/modules/picard/build/libs/picard.jar AddOrReplaceReadGroups I={input} O={output.bam} {params.rg} VALIDATION_STRINGENCY=LENIENT")
#		shell("touch {output.flg}")

def demand_rgFix_by_group(wildcards):
	return [ "mapped_reads/%s/%s_vs_%s.RG%s.%s.sort.bam" % pear for pear in [ tuple([v, v, wildcards.ref_genome, str(samps_by_group(wildcards.group).index(v)), wildcards.aligner]) for v in samps_by_group(wildcards.group) ] ]

rule RGfix_group:
	input:
		potato = demand_rgFix_by_group,
	params:
		runmem_gb=8,
		runtime="6:00:00"
	output:
		"{group}_vs_{ref_genome}_RG_fixed.group.flag"
	shell:
		"touch {output}"

rule vcf_indiv:
	input:
		bam = lambda wildcards: "mapped_reads/%s/%s_vs_%s.%s.sort.bam" % tuple([ wildcards.sample, wildcards.sample, wildcards.ref_genome, wildcards.aligner ])
	output:
		vcf_out = "variant_comparisons/{prefix}_vs_{ref_genome}.{aligner}.indiv.{sample}.vcf"
	params:
		freebayes="--standard-filters --min-coverage 3",
		runmem_gb=8,
		runtime="12:00:00"
	run:
		path2ref = ref_genome_by_name[wildcards.ref_genome]['path']
		shell("freebayes {params.freebayes} -f {path2ref} {input.bam} | vcftools --remove-indels --vcf - --recode --recode-INFO-all --stdout  > {output.vcf_out}")

ruleorder: vcf_indiv > vcf_joint
ruleorder: call_indiv_from_joint_vcf > vcf_joint

rule vcf_joint:
	input: 
#		flag_in="{group}_vs_{ref_genome}_RG_fixed.group.flag",
		alignments_in = demand_rgFix_by_group
	output:
		joint_vcf="variant_comparisons/{group}_vs_{ref_genome}.{aligner}.grouped.vcf"
	params:
		freebayes="--standard-filters --min-coverage 3",
		runmem_gb=8,
		runtime="12:00:00"
	run:
		path2ref = ref_genome_by_name[wildcards.ref_genome]['path']
		shell("freebayes {params.freebayes} -f {path2ref} {input.alignments_in} | vcftools --remove-indels --vcf - --recode --recode-INFO-all --stdout  > {output.joint_vcf}")

rule call_indiv_from_joint_vcf:
	input:
		lambda wildcards: "variant_comparisons/%s_vs_%s.%s.grouped.vcf" % tuple([return_group_by_samp(wildcards.crample), wildcards.ref_genome, wildcards.aligner])
	output:
		vcf_out = "variant_comparisons/{crample}_vs_{ref_genome}.{aligner}.joint.{crample}.vcf"	
	params:
		runmem_gb=8,
		runtime="1:00:00"
	shell:
		"vcftools --indv {wildcards.crample} --vcf {input} --recode --recode-INFO-all --stdout > {output.vcf_out}"

rule zyggy_stardust:
	input: 
		vcf_in = "variant_comparisons/{vcf_prefix}.vcf",
		windoze = "{window_prefix}.windows.bed",
	output:
		bed_out = "analysis_out/{vcf_prefix}.{window_prefix}.windowedZygosity.bed"
	params:
		runmem_gb=8,
		runtime="6:00:00"
	shell:
		"sh scripts/vcf_zyggy.sh {input.vcf_in} {input.windoze} {output.bed_out}"

#rule take_off_every_zyg:



#https://www.biostars.org/p/178146/
# hets & homs treated as equivalent
rule naive_vcf_compare:
	input:
		vcf_parent = "variant_comparisons/{sample_p}_vs_{genome}.{mapper_p}.{caller_p}.{sample_p}.vcf",
		vcf_offspring = "variant_comparisons/{sample_o}_vs_{genome}.{mapper_o}.{caller_o}.{sample_o}.vcf",
#		vcf_parent = "variant_comparisons/{vcf_prefix_p}.{call_type_p}.{sample_p}.vcf",
#		vcf_offspring = "variant_comparisons/{vcf_prefix_o}.{call_type_o}.{sample_o}.vcf",
#		windoze = "{window_prefix}.windows.bed",
	params:
		runmem_gb=8,
		runtime="12:00:00"
	output:
		vcf_shared_snps_bed = "variant_comparisons/{sample_o}.{mapper_o}.{caller_o}.sharedWith.{sample_p}.{mapper_p}.{caller_p}.vs_{genome}.vcfNaive.sharedSnps.bed"
	shell:
		"sh scripts/vcf_naive.sh {input.vcf_parent} {input.vcf_offspring} {output.vcf_shared_snps_bed}"

rule naiveVcf_lifter:
	input:
		unlifted="variant_comparisons/{vcfNaive_prefix}.vs_{unlift_genome}.vcfNaive.sharedSnps.bed"
	output:
		lifted='variant_comparisons/{vcfNaive_prefix}.vs_{unlift_genome}.lift2{lift_genome}.vcfNaive.sharedSnps.bed',
		too_heavy='variant_comparisons/{vcfNaive_prefix}.vs_{unlift_genome}.lift2{lift_genome}.vcfNaive.sharedSnps.tooHeavy'
	params:
		runmem_gb=8,
		runtime="3:00:00"
	run:
		chain = chain_dict_by_destination[wildcards.lift_genome][wildcards.unlift_genome]
		shell(
			'~/modules/UCSC_utils/liftOver {input.unlifted} {chain} {output.lifted}.tmp {output.too_heavy}'
		)
		shell(
			'bedtools sort -i {output.lifted}.tmp > {output.lifted}'
		)
		shell(
			'rm {output.lifted}.tmp'
		)

ruleorder: naiveVcf_lifter > naive_vcf_compare





rule sharedSnp_merger_std:
	input:
		snps1='variant_comparisons/{sample}_and_{parent1}_vs_{ref1}.{mapper}.lift2{common}.sharedSnps.bed',
		snps2='variant_comparisons/{sample}_and_{parent2}_vs_{ref2}.{mapper}.lift2{common}.sharedSnps.bed'
	output:
		percentSnps='variant_comparisons/{sample}_and_{parent1}_and_{parent2}.{mapper}.lift2{common}.percent_{ref2}_vs_{ref1}.standard.sharedSnps.bed'
	params:
		runmem_gb=8,
		runtime="1:00:00"
	shell:
		'sh scripts/mergeOpposingSharedSnps.sh {input.snps1} {input.snps2} > {output}'



rule sharedSnp_merger_vcf:
	input:
		snps1='variant_comparisons/{vcfNaive_prefix1}.vs_{ref1}.lift2{common}.vcfNaive.sharedSnps.bed',
		snps2='variant_comparisons/{vcfNaive_prefix2}.vs_{ref2}.lift2{common}.vcfNaive.sharedSnps.bed'
	output:
		percentSnps='variant_comparisons/{vcfNaive_prefix1}_and_{vcfNaive_prefix2}.lift2{common}.percent_{ref1}_vs_{ref2}.vcfNaive.sharedSnps.bed'
	params:
		runmem_gb=8,
		runtime="1:00:00"
	shell:
		'sh scripts/mergeOpposingSharedSnps.sh {input.snps1} {input.snps2} > {output}'





rule repeatDensitometer:
	input:
		windows = "{window_prefix}.windows.bed",
	params:
		repeatmasker = "/proj/cdjones_lab/Genomics_Data_Commons/annotations/drosophila_melanogaster/dm6.repeatMasker.bed",
		runmem_gb=8,
		runtime="1:00:00",
	output:
		dens_out = "{window_prefix}.repeatDensity.bed"
	shell:
		"bedtools coverage -a {input.windows} -b {params.repeatmasker} > {output.dens_out}"



rule repeatDensityMasker:
	input:
		mask_file = "{window_prefix}.repeatDensity.bed",
		file_2bmaskt = "{file_prefix}.bed"
	params:
#		dens_thresh = 0.2,
		runtime="1:00:00",
		runmem_gb=8,
	output:
		fileOut = "{file_prefix}.maskedBy.{window_prefix}.densityThresh{dens_thresh}.bed"
	shell:
		""" cat {input.mask_file} | awk '{{if($7>{wildcards.dens_thresh})print;}}' | bedtools intersect -v -wa -a {input.file_2bmaskt} -b - > {output.fileOut} """








rule nicole_flies_reanalysis:
	input:
		fly_finals = ["analysis_out/REC7_and_PARG1_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed", "analysis_out/REC7_and_PARC1_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed", "analysis_out/REC7.bwa.joint.sharedWith.PARC1.bwa.joint.vs_dm6.vcfNaive.dm6_w100000_s10000.windowCounts.bed", "analysis_out/REC7.bwa.joint.sharedWith.PARG1.bwa.joint.vs_dm6.vcfNaive.dm6_w100000_s10000.windowCounts.bed"]
	output:
		flg = "nicoleFlies.flag"
	params:
		runmem_gb=1,
		runtime="48:00:00"
	shell:
		"touch {output.flg}"



rule build_PsiSeq2_analysis_withRich:
	input:
		proofOfConcept_simulations = ["melOff_and_melOne_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed", "melOff_and_melTwo_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed"],
		lift_tests = ["analysis_out/10A_and_SynthSec_vs_droSim1.droSim1_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SynthSim_vs_droSec1.droSec1_w100000_s10000.windowCounts.bed","variant_comparisons/10A_and_SynthSec_vs_droSim1.dm6.sharedSnps.tooHeavy.bed"],
		psiSeq_lines = ["analysis_out/10A_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10B_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/13A_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/13B_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/17A_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/17B_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR303333_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10B_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/13A_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/13B_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/17A_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/17B_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR303333_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		check_Flybase_genomes=['analysis_out/SucSec_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed','analysis_out/SRR869587_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed','analysis_out/SRR6426002_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed','analysis_out/SRR5860570_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed','analysis_out/SucSec_and_SynthSimFB_vs_dsecr1.bwa.dsecr1_w100000_s10000.windowCounts.bed','analysis_out/SRR869587_and_SynthSimFB_vs_dsecr1.bwa.dsecr1_w100000_s10000.windowCounts.bed','analysis_out/SRR6426002_and_SynthSimFB_vs_dsecr1.bwa.dsecr1_w100000_s10000.windowCounts.bed','analysis_out/SRR5860570_and_SynthSimFB_vs_dsecr1.bwa.dsecr1_w100000_s10000.windowCounts.bed'],
		control_sec_lines = ["analysis_out/SucSec_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR869587_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR869587_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR6426002_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR6426002_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSec_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSim_vs_droSec1.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		different_parent_lines=["analysis_out/10A_and_SRR869587_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR6426002_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR5860570_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SRR869587_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SRR6426002_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SRR5860570_vs_droSim1.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		different_mapping_strategies = ["analysis_out/SucSec_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSec_vs_droSim1.bwaUniq.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSec_vs_droSim1.ngm.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSim_vs_droSec1.bwaUniq.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SucSec_and_SynthSim_vs_droSec1.ngm.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		heterozygosity_results = ["analysis_out/10A_vs_droSim1.bwa.indiv.10A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/10A_vs_droSim1.bwa.joint.10A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR5860570_vs_droSim1.bwa.indiv.SRR5860570.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR5860570_vs_droSim1.bwa.joint.SRR5860570.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR6426002_vs_droSim1.bwa.indiv.SRR6426002.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR6426002_vs_droSim1.bwa.joint.SRR6426002.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR869587_vs_droSim1.bwa.indiv.SRR869587.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR869587_vs_droSim1.bwa.joint.SRR869587.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SucSec_vs_droSim1.bwa.indiv.SucSec.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SucSec_vs_droSim1.bwa.joint.SucSec.droSim1_w100000_s10000.windowedZygosity.bed"],
		variant_based_results_naive = [],
		variant_based_results_nuanced = [],		
	params:
		runmem_gb=1,
		runtime="12:00:00"

	output:
		pdf_report = "PsiSeq2.pdf"
	run:
		shell("mkdir figs")
		shell("sh scripts/markerDown.sh PsiSeq2_TheSequel.Rmd {output.pdf_report}")
# 		'R -e Sys.setenv"(RSTUDIO_PANDOC="/nas/longleaf/apps/rstudio/1.0.136/bin/pandoc")" -e  rmarkdown::render"("scripts/PsiSeq2_TheSequel.Rmd",output_file="PsiSeq2.pdf")"'





rule build_PsiSeq2_analysis_withoutRich:
	input:
		#proofOfConcept_simulations = ["melOff_and_melOne_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed", "melOff_and_melTwo_vs_dm6.bwa.dm6_w100000_s10000.windowCounts.bed"],
		past_and_controls = ['analysis_out/SRR869587_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR869587_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR6426002_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR6426002_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR5860570_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR5860570_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR303333_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR303333_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed'],
		different_genome_assemblies =["analysis_out/SRR869587_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed","analysis_out/SRR6426002_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed","analysis_out/SRR303333_and_SynthSecFB_vs_dsimr2.bwa.dsimr2_w100000_s10000.windowCounts.bed", "analysis_out/SRR869587_and_SynthSecDM_vs_dsimDM.bwa.dsimDM_w100000_s10000.windowCounts.bed","analysis_out/SRR6426002_and_SynthSecDM_vs_dsimDM.bwa.dsimDM_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSecDM_vs_dsimDM.bwa.dsimDM_w100000_s10000.windowCounts.bed","analysis_out/SRR303333_and_SynthSecDM_vs_dsimDM.bwa.dsimDM_w100000_s10000.windowCounts.bed",],
		present_data = ['analysis_out/10A_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/10B_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/13A_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/13B_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/17A_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/17B_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR303333_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/10A_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/10B_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/13A_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/13B_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/17A_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/17B_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR303333_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed'],
		heterozygosity_results = ["analysis_out/10A_vs_droSim1.bwa.joint.10A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR303333_vs_droSim1.bwa.joint.SRR303333.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR869587_vs_droSim1.bwa.joint.SRR869587.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR6426002_vs_droSim1.bwa.joint.SRR6426002.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR5860570_vs_droSim1.bwa.joint.SRR5860570.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/10A_vs_droSim1.bwa.indiv.10A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR303333_vs_droSim1.bwa.indiv.SRR303333.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR869587_vs_droSim1.bwa.indiv.SRR869587.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR6426002_vs_droSim1.bwa.indiv.SRR6426002.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/SRR5860570_vs_droSim1.bwa.indiv.SRR5860570.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/10B_vs_droSim1.bwa.indiv.10B.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/10B_vs_droSim1.bwa.joint.10B.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/13A_vs_droSim1.bwa.indiv.13A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/13A_vs_droSim1.bwa.joint.13A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/13B_vs_droSim1.bwa.indiv.13B.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/13B_vs_droSim1.bwa.joint.13B.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/17A_vs_droSim1.bwa.indiv.17A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/17A_vs_droSim1.bwa.joint.17A.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/17B_vs_droSim1.bwa.indiv.17B.droSim1_w100000_s10000.windowedZygosity.bed","analysis_out/17B_vs_droSim1.bwa.joint.17B.droSim1_w100000_s10000.windowedZygosity.bed"],
		lift_tests =["analysis_out/10A_and_SynthSec_vs_droSim1.bwa.dm6.tooHeavy.droSim1_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SynthSec_vs_droSim1.bwa.droSim1_w100000_s10000.windowCounts.bed"],
		different_mapping_strategies = ["analysis_out/SRR5860570_and_SynthSec_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSec_vs_droSim1.bwaUniq.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSec_vs_droSim1.ngm.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSim_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSim_vs_droSec1.bwaUniq.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SynthSim_vs_droSec1.ngm.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		different_f0 = ["analysis_out/10A_and_SRR869587_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR6426002_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR5860570_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SRR869587_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SRR6426002_vs_droSim1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR869587_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR6426002_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/10A_and_SRR5860570_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SRR869587_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed","analysis_out/SRR5860570_and_SRR6426002_vs_droSec1.bwa.lift2dm6.dm6_w100000_s10000.windowCounts.bed"],
		different_bin_strategies = ['analysis_out/10A_and_SynthSec_vs_droSim1.bwa.lift2dm6.b1000s250.snpBins.bed','analysis_out/SRR5860570_and_SynthSec_vs_droSim1.bwa.lift2dm6.b1000s250.snpBins.bed','analysis_out/10A_and_SynthSim_vs_droSec1.bwa.lift2dm6.b1000s250.snpBins.bed','analysis_out/SRR5860570_and_SynthSim_vs_droSec1.bwa.lift2dm6.b1000s250.snpBins.bed'],
		variant_based_results_naive = ['analysis_out/10A.bwa.joint.sharedWith.SRR869587.bwa.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR303333.bwa.joint.sharedWith.SRR869587.bwa.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s10000.windowCounts.bed','analysis_out/SRR5860570.bwa.joint.sharedWith.SRR869587.bwa.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s10000.windowCounts.bed',],
		#variant_based_results_nuanced = [],		
		percent_simulans=["analysis_out/SRR5860570_and_SynthSec_and_SynthSim.bwa.lift2dm6.percent_droSim1_vs_droSec1.standard.dm6_w100000_s100000.windowCounts.bed","analysis_out/10A_and_SynthSec_and_SynthSim.bwa.lift2dm6.percent_droSim1_vs_droSec1.standard.dm6_w100000_s100000.windowCounts.bed"],
		sigbin_total_recall = ['analysis_out/10A.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/10B.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/13A.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/13B.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/17A.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/17B.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/SRR303333.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/SRR5860570.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed','analysis_out/SRR6426002.bwaUniq.joint.sharedWith.SRR869587.bwaUniq.joint.vs_droSim1.lift2dm6.vcfNaive.dm6_w100000_s100000.windowCounts.bed',],
	params:
		runmem_gb=8,
		runtime="12:00:00"

	output:
		pdf_report = "PsiSeq2_main_noRich.pdf"
	run:
		shell("mkdir figs")
		shell("sh scripts/markerDown.sh scripts/PsiSeq2_main_noRich.Rmd {output.pdf_report}")



